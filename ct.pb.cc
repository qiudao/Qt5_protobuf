// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ct.proto

#include "ct.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ct_ct_2eproto;
namespace ctproto {
class ctrequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ctrequest> _instance;
} _ctrequest_default_instance_;
class ctDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ct> _instance;
} _ct_default_instance_;
class ctresponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ctresponse> _instance;
} _ctresponse_default_instance_;
}  // namespace ctproto
static void InitDefaultsscc_info_ct_ct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ctproto::_ct_default_instance_;
    new (ptr) ::ctproto::ct();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ctproto::ct::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ct_ct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ct_ct_2eproto}, {}};

static void InitDefaultsscc_info_ctrequest_ct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ctproto::_ctrequest_default_instance_;
    new (ptr) ::ctproto::ctrequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ctproto::ctrequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ctrequest_ct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ctrequest_ct_2eproto}, {}};

static void InitDefaultsscc_info_ctresponse_ct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ctproto::_ctresponse_default_instance_;
    new (ptr) ::ctproto::ctresponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ctproto::ctresponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ctresponse_ct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ctresponse_ct_2eproto}, {
      &scc_info_ct_ct_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ct_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ct_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ct_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ct_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ctproto::ctrequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ctproto::ctrequest, quote_),
  PROTOBUF_FIELD_OFFSET(::ctproto::ctrequest, start_),
  PROTOBUF_FIELD_OFFSET(::ctproto::ctrequest, end_),
  PROTOBUF_FIELD_OFFSET(::ctproto::ctrequest, length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ctproto::ct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ctproto::ct, o_),
  PROTOBUF_FIELD_OFFSET(::ctproto::ct, c_),
  PROTOBUF_FIELD_OFFSET(::ctproto::ct, h_),
  PROTOBUF_FIELD_OFFSET(::ctproto::ct, l_),
  PROTOBUF_FIELD_OFFSET(::ctproto::ct, v_),
  PROTOBUF_FIELD_OFFSET(::ctproto::ct, s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ctproto::ctresponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ctproto::ctresponse, cts_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ctproto::ctrequest)},
  { 9, -1, sizeof(::ctproto::ct)},
  { 20, -1, sizeof(::ctproto::ctresponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ctproto::_ctrequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ctproto::_ct_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ctproto::_ctresponse_default_instance_),
};

const char descriptor_table_protodef_ct_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010ct.proto\022\007ctproto\032\037google/protobuf/tim"
  "estamp.proto\"F\n\tctrequest\022\r\n\005quote\030\001 \001(\t"
  "\022\r\n\005start\030\002 \001(\t\022\013\n\003end\030\003 \001(\t\022\016\n\006length\030\004"
  " \001(\002\"F\n\002ct\022\t\n\001O\030\001 \001(\002\022\t\n\001C\030\002 \001(\002\022\t\n\001H\030\003 "
  "\001(\002\022\t\n\001L\030\004 \001(\002\022\t\n\001V\030\005 \001(\002\022\t\n\001S\030\006 \001(\004\"&\n\n"
  "ctresponse\022\030\n\003cts\030\001 \003(\0132\013.ctproto.ctb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ct_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ct_2eproto_sccs[3] = {
  &scc_info_ct_ct_2eproto.base,
  &scc_info_ctrequest_ct_2eproto.base,
  &scc_info_ctresponse_ct_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ct_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ct_2eproto = {
  false, false, descriptor_table_protodef_ct_2eproto, "ct.proto", 244,
  &descriptor_table_ct_2eproto_once, descriptor_table_ct_2eproto_sccs, descriptor_table_ct_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_ct_2eproto::offsets,
  file_level_metadata_ct_2eproto, 3, file_level_enum_descriptors_ct_2eproto, file_level_service_descriptors_ct_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ct_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ct_2eproto)), true);
namespace ctproto {

// ===================================================================

void ctrequest::InitAsDefaultInstance() {
}
class ctrequest::_Internal {
 public:
};

ctrequest::ctrequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ctproto.ctrequest)
}
ctrequest::ctrequest(const ctrequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  quote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_quote().empty()) {
    quote_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_quote(),
      GetArena());
  }
  start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start().empty()) {
    start_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_start(),
      GetArena());
  }
  end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_end().empty()) {
    end_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_end(),
      GetArena());
  }
  length_ = from.length_;
  // @@protoc_insertion_point(copy_constructor:ctproto.ctrequest)
}

void ctrequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ctrequest_ct_2eproto.base);
  quote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  length_ = 0;
}

ctrequest::~ctrequest() {
  // @@protoc_insertion_point(destructor:ctproto.ctrequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ctrequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  quote_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ctrequest::ArenaDtor(void* object) {
  ctrequest* _this = reinterpret_cast< ctrequest* >(object);
  (void)_this;
}
void ctrequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ctrequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ctrequest& ctrequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ctrequest_ct_2eproto.base);
  return *internal_default_instance();
}


void ctrequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ctproto.ctrequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quote_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  start_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  end_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  length_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ctrequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string quote = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_quote();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctproto.ctrequest.quote"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_start();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctproto.ctrequest.start"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_end();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctproto.ctrequest.end"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ctrequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ctproto.ctrequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string quote = 1;
  if (this->quote().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quote().data(), static_cast<int>(this->_internal_quote().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctproto.ctrequest.quote");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_quote(), target);
  }

  // string start = 2;
  if (this->start().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start().data(), static_cast<int>(this->_internal_start().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctproto.ctrequest.start");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_start(), target);
  }

  // string end = 3;
  if (this->end().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end().data(), static_cast<int>(this->_internal_end().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctproto.ctrequest.end");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_end(), target);
  }

  // float length = 4;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ctproto.ctrequest)
  return target;
}

size_t ctrequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ctproto.ctrequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string quote = 1;
  if (this->quote().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quote());
  }

  // string start = 2;
  if (this->start().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start());
  }

  // string end = 3;
  if (this->end().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end());
  }

  // float length = 4;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ctrequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ctproto.ctrequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ctrequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ctrequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ctproto.ctrequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ctproto.ctrequest)
    MergeFrom(*source);
  }
}

void ctrequest::MergeFrom(const ctrequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ctproto.ctrequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.quote().size() > 0) {
    _internal_set_quote(from._internal_quote());
  }
  if (from.start().size() > 0) {
    _internal_set_start(from._internal_start());
  }
  if (from.end().size() > 0) {
    _internal_set_end(from._internal_end());
  }
  if (!(from.length() <= 0 && from.length() >= 0)) {
    _internal_set_length(from._internal_length());
  }
}

void ctrequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ctproto.ctrequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ctrequest::CopyFrom(const ctrequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ctproto.ctrequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ctrequest::IsInitialized() const {
  return true;
}

void ctrequest::InternalSwap(ctrequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  quote_.Swap(&other->quote_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  start_.Swap(&other->start_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  end_.Swap(&other->end_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(length_, other->length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ctrequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ct::InitAsDefaultInstance() {
}
class ct::_Internal {
 public:
};

ct::ct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ctproto.ct)
}
ct::ct(const ct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&o_, &from.o_,
    static_cast<size_t>(reinterpret_cast<char*>(&v_) -
    reinterpret_cast<char*>(&o_)) + sizeof(v_));
  // @@protoc_insertion_point(copy_constructor:ctproto.ct)
}

void ct::SharedCtor() {
  ::memset(&o_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v_) -
      reinterpret_cast<char*>(&o_)) + sizeof(v_));
}

ct::~ct() {
  // @@protoc_insertion_point(destructor:ctproto.ct)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ct::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ct::ArenaDtor(void* object) {
  ct* _this = reinterpret_cast< ct* >(object);
  (void)_this;
}
void ct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ct& ct::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ct_ct_2eproto.base);
  return *internal_default_instance();
}


void ct::Clear() {
// @@protoc_insertion_point(message_clear_start:ctproto.ct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&o_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v_) -
      reinterpret_cast<char*>(&o_)) + sizeof(v_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float O = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          o_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float C = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float H = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float L = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float V = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 S = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ct::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ctproto.ct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float O = 1;
  if (!(this->o() <= 0 && this->o() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_o(), target);
  }

  // float C = 2;
  if (!(this->c() <= 0 && this->c() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_c(), target);
  }

  // float H = 3;
  if (!(this->h() <= 0 && this->h() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_h(), target);
  }

  // float L = 4;
  if (!(this->l() <= 0 && this->l() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_l(), target);
  }

  // float V = 5;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_v(), target);
  }

  // uint64 S = 6;
  if (this->s() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ctproto.ct)
  return target;
}

size_t ct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ctproto.ct)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float O = 1;
  if (!(this->o() <= 0 && this->o() >= 0)) {
    total_size += 1 + 4;
  }

  // float C = 2;
  if (!(this->c() <= 0 && this->c() >= 0)) {
    total_size += 1 + 4;
  }

  // float H = 3;
  if (!(this->h() <= 0 && this->h() >= 0)) {
    total_size += 1 + 4;
  }

  // float L = 4;
  if (!(this->l() <= 0 && this->l() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 S = 6;
  if (this->s() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_s());
  }

  // float V = 5;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ctproto.ct)
  GOOGLE_DCHECK_NE(&from, this);
  const ct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ctproto.ct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ctproto.ct)
    MergeFrom(*source);
  }
}

void ct::MergeFrom(const ct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ctproto.ct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.o() <= 0 && from.o() >= 0)) {
    _internal_set_o(from._internal_o());
  }
  if (!(from.c() <= 0 && from.c() >= 0)) {
    _internal_set_c(from._internal_c());
  }
  if (!(from.h() <= 0 && from.h() >= 0)) {
    _internal_set_h(from._internal_h());
  }
  if (!(from.l() <= 0 && from.l() >= 0)) {
    _internal_set_l(from._internal_l());
  }
  if (from.s() != 0) {
    _internal_set_s(from._internal_s());
  }
  if (!(from.v() <= 0 && from.v() >= 0)) {
    _internal_set_v(from._internal_v());
  }
}

void ct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ctproto.ct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ct::CopyFrom(const ct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ctproto.ct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ct::IsInitialized() const {
  return true;
}

void ct::InternalSwap(ct* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ct, v_)
      + sizeof(ct::v_)
      - PROTOBUF_FIELD_OFFSET(ct, o_)>(
          reinterpret_cast<char*>(&o_),
          reinterpret_cast<char*>(&other->o_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ct::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ctresponse::InitAsDefaultInstance() {
}
class ctresponse::_Internal {
 public:
};

ctresponse::ctresponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ctproto.ctresponse)
}
ctresponse::ctresponse(const ctresponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cts_(from.cts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ctproto.ctresponse)
}

void ctresponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ctresponse_ct_2eproto.base);
}

ctresponse::~ctresponse() {
  // @@protoc_insertion_point(destructor:ctproto.ctresponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ctresponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ctresponse::ArenaDtor(void* object) {
  ctresponse* _this = reinterpret_cast< ctresponse* >(object);
  (void)_this;
}
void ctresponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ctresponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ctresponse& ctresponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ctresponse_ct_2eproto.base);
  return *internal_default_instance();
}


void ctresponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ctproto.ctresponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ctresponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ctproto.ct cts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ctresponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ctproto.ctresponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ctproto.ct cts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ctproto.ctresponse)
  return target;
}

size_t ctresponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ctproto.ctresponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ctproto.ct cts = 1;
  total_size += 1UL * this->_internal_cts_size();
  for (const auto& msg : this->cts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ctresponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ctproto.ctresponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ctresponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ctresponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ctproto.ctresponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ctproto.ctresponse)
    MergeFrom(*source);
  }
}

void ctresponse::MergeFrom(const ctresponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ctproto.ctresponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cts_.MergeFrom(from.cts_);
}

void ctresponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ctproto.ctresponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ctresponse::CopyFrom(const ctresponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ctproto.ctresponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ctresponse::IsInitialized() const {
  return true;
}

void ctresponse::InternalSwap(ctresponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cts_.InternalSwap(&other->cts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ctresponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ctproto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ctproto::ctrequest* Arena::CreateMaybeMessage< ::ctproto::ctrequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ctproto::ctrequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ctproto::ct* Arena::CreateMaybeMessage< ::ctproto::ct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ctproto::ct >(arena);
}
template<> PROTOBUF_NOINLINE ::ctproto::ctresponse* Arena::CreateMaybeMessage< ::ctproto::ctresponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ctproto::ctresponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
